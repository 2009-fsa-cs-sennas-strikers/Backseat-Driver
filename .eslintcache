[{"/Users/winsonchan/Documents/immersiveFullStack/seniorPhase/Backseat-Driver/src/index.js":"1","/Users/winsonchan/Documents/immersiveFullStack/seniorPhase/Backseat-Driver/src/reportWebVitals.js":"2","/Users/winsonchan/Documents/immersiveFullStack/seniorPhase/Backseat-Driver/src/App.js":"3","/Users/winsonchan/Documents/immersiveFullStack/seniorPhase/Backseat-Driver/src/firebase.js":"4","/Users/winsonchan/Documents/immersiveFullStack/seniorPhase/Backseat-Driver/src/ThreeJs/Box.js":"5","/Users/winsonchan/Documents/immersiveFullStack/seniorPhase/Backseat-Driver/src/ThreeJs/Car.js":"6","/Users/winsonchan/Documents/immersiveFullStack/seniorPhase/Backseat-Driver/src/ThreeJs/PlaneofExistence.js":"7","/Users/winsonchan/Documents/immersiveFullStack/seniorPhase/Backseat-Driver/src/pixi/Scene.js":"8","/Users/winsonchan/Documents/immersiveFullStack/seniorPhase/Backseat-Driver/src/pixi/Game.js":"9","/Users/winsonchan/Documents/immersiveFullStack/seniorPhase/Backseat-Driver/src/pixi/Car.js":"10","/Users/winsonchan/Documents/immersiveFullStack/seniorPhase/Backseat-Driver/src/tenserFlow/index.js":"11"},{"size":457,"mtime":1606854105636,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1606854105859,"results":"14","hashOfConfig":"13"},{"size":1795,"mtime":1606859232082,"results":"15","hashOfConfig":"13"},{"size":567,"mtime":1606854105636,"results":"16","hashOfConfig":"13"},{"size":289,"mtime":1606854105635,"results":"17","hashOfConfig":"13"},{"size":2590,"mtime":1606861836487,"results":"18","hashOfConfig":"13"},{"size":464,"mtime":1606854105636,"results":"19","hashOfConfig":"13"},{"size":517,"mtime":1606859163081,"results":"20","hashOfConfig":"13"},{"size":7359,"mtime":1606860074039,"results":"21","hashOfConfig":"13"},{"size":394,"mtime":1606854105859,"results":"22","hashOfConfig":"13"},{"size":1484,"mtime":1606854105860,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1e35hih",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"26"},"/Users/winsonchan/Documents/immersiveFullStack/seniorPhase/Backseat-Driver/src/index.js",[],["53","54"],"/Users/winsonchan/Documents/immersiveFullStack/seniorPhase/Backseat-Driver/src/reportWebVitals.js",[],"/Users/winsonchan/Documents/immersiveFullStack/seniorPhase/Backseat-Driver/src/App.js",["55","56","57","58","59"],"import React, { Suspense, useState, useRef } from 'react'\nimport * as THREE from 'three'\nimport { Canvas } from 'react-three-fiber'\nimport {OrbitControls, Stars} from 'drei'\nimport {Physics} from 'use-cannon'\nimport Car from './ThreeJs/Car'\nimport Box from './ThreeJs/Box'\nimport Plane from './ThreeJs/PlaneofExistence'\nimport Scene from './pixi/Scene';\nimport './App.css';\nimport firebase from './firebase'\nimport { loadModel, startListening } from './tenserFlow'\nimport { Stage } from 'react-pixi-fiber'\nimport Game from './pixi/Game'\n\nconst options = {\n  backgroundColor: 0x1099bb,\n  height: 600,\n  width: 800,\n  antialias: true, // default: false\n  transparent: false, // default: false\n  resolution: 1, // default: 1\n};\n\nclass App extends React.Component{\n  constructor(props) {\n    super()\n    this.state = {\n      action: ''\n    }\n    this.voiceAction = this.voiceAction.bind(this)\n  }\n\n  componentDidMount() {\n    loadModel()\n    .then(() => startListening(this.voiceAction))\n  }\n\n  voiceAction(command) {\n    this.setState({\n      action: command,\n    });\n    console.log('voice command:', this.state.action);\n  }\n\n  // const [position, setPosition] = useState({x:1, y:0, z:0})\n  // const {x,y,z} = position\n  render() {\n  return (\n    <>\n      <div className=\"pixi\">\n        <Stage options={options}>\n          <Game vHeight={options.height} vWidth={options.width} action={this.state.action}/>\n        </Stage>\n      </div>\n      <Canvas>\n        <OrbitControls />\n        <Stars />\n        <ambientLight intensity={0.5} />\n        <spotLight intensity={0.8} position={[300, 300, 400]} />\n        <Physics >\n        <Suspense fallback={<Box />}>{<Car action={this.state.action}/>}</Suspense>\n        <Plane />\n        </Physics >\n      </Canvas>\n    </>\n  )\n  }\n\n}\n\nexport default App\n","/Users/winsonchan/Documents/immersiveFullStack/seniorPhase/Backseat-Driver/src/firebase.js",["60"],"import firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyCTkYa8Oea0gGKZXTUOTa-UTP72rSB81dw\",\n  authDomain: \"backseat-driver-dbc21.firebaseapp.com\",\n  databaseURL: \"https://backseat-driver-dbc21.firebaseio.com\",\n  projectId: \"backseat-driver-dbc21\",\n  storageBucket: \"backseat-driver-dbc21.appspot.com\",\n  messagingSenderId: \"136877489486\",\n  appId: \"1:136877489486:web:911ab156f0092c1515321f\",\n  measurementId: \"G-N9KYGB0YPM\"\n})\n\nconst firestore = firebase.firestore()\n\nexport default firebase\n","/Users/winsonchan/Documents/immersiveFullStack/seniorPhase/Backseat-Driver/src/ThreeJs/Box.js",["61"],"import React from 'react'\nimport * as THREE from 'three'\n\nconst Box = () => {\n    return (\n      <mesh>\n        <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\n        <meshStandardMaterial attach=\"material\" transparent opacity={0.5} />\n      </mesh>\n    )\n  }\n\nexport default Box","/Users/winsonchan/Documents/immersiveFullStack/seniorPhase/Backseat-Driver/src/ThreeJs/Car.js",["62","63","64"],"/Users/winsonchan/Documents/immersiveFullStack/seniorPhase/Backseat-Driver/src/ThreeJs/PlaneofExistence.js",["65","66"],"import React from 'react'\nimport * as THREE from 'three'\nimport { usePlane } from 'use-cannon'\n\nconst Plane = (props) => {\n    const [ref] = usePlane(() => ({\n      rotation: [-Math.PI /2,0,0]\n    }))\n    return (\n      <mesh position={[0,0,0]} rotation={[-Math.PI / 2, 0, 0]}>\n        <planeBufferGeometry attach=\"geometry\" args={[100, 100, 100]} />\n        <meshStandardMaterial attach=\"material\" color=\"black\" />\n      </mesh>\n    )\n  \n  }\n\nexport default Plane","/Users/winsonchan/Documents/immersiveFullStack/seniorPhase/Backseat-Driver/src/pixi/Scene.js",[],"/Users/winsonchan/Documents/immersiveFullStack/seniorPhase/Backseat-Driver/src/pixi/Game.js",["67","68","69"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withApp } from 'react-pixi-fiber';\nimport Car from './Car';\nimport { loadModel, startListening } from '../tenserFlow';\n\n// http://pixijs.io/examples/#/basics/basic.js\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rotation: 0,\n      vx: 0,\n      vy: 0,\n      x: 400,\n      y: 300,\n      speed: 0,\n      // action: '',\n    };\n    // this.voiceAction = this.voiceAction.bind(this);\n    this.contain = this.contain.bind(this);\n  }\n\n  // voiceAction(command) {\n  //   this.setState({\n  //     action: command,\n  //   });\n  //   console.log('pixi game command:', this.state.action);\n  // }\n\n  componentDidMount() {\n    //passed down through Stage component\n    this.props.app.ticker.add(this.animate);\n    // loadModel();\n    // startListening(this.voiceAction);\n  }\n\n  componentWillUnmount() {\n    this.props.app.ticker.remove(this.animate);\n  }\n\n  ///contain function; pixijs\n  //put helper functions in separate folder?\n  contain(carState, container) {\n    let collision = undefined;\n\n    //Left\n    if (carState.x < container.x) {\n      this.setState({\n        x: container.x,\n        // vx: 0,\n      });\n      collision = 'left';\n    }\n\n    //Top\n    if (carState.y < container.y) {\n      this.setState({\n        y: container.y,\n        vy: 0,\n      });\n      collision = 'top';\n    }\n\n    //Right\n    if (carState.x > container.width) {\n      this.setState({\n        x: container.width,\n        vx: 0,\n      });\n\n      collision = 'right';\n    }\n\n    //Bottom\n    if (carState.y > container.height) {\n      this.setState({\n        y: container.height,\n        vy: 0,\n      });\n      collision = 'bottom';\n    }\n    //Return the `collision` value\n    return collision;\n  }\n\n  //collision test function\n  hitTestRectangle(r1, r2) {\n    //Define the variables we'll need to calculate\n    let hit, combinedHalfWidths, combinedHalfHeights, vx, vy;\n\n    //hit will determine whether there's a collision\n    hit = false;\n\n    //Find the center points of each carState\n    r1.centerX = r1.x + r1.width / 2;\n    r1.centerY = r1.y + r1.height / 2;\n    r2.centerX = r2.x + r2.width / 2;\n    r2.centerY = r2.y + r2.height / 2;\n\n    //Find the half-widths and half-heights of each carState\n    r1.halfWidth = r1.width / 2;\n    r1.halfHeight = r1.height / 2;\n    r2.halfWidth = r2.width / 2;\n    r2.halfHeight = r2.height / 2;\n\n    //Calculate the distance vector between the carStates\n    vx = r1.centerX - r2.centerX;\n    vy = r1.centerY - r2.centerY;\n\n    //Figure out the combined half-widths and half-heights\n    combinedHalfWidths = r1.halfWidth + r2.halfWidth;\n    combinedHalfHeights = r1.halfHeight + r2.halfHeight;\n\n    //Check for a collision on the x axis\n    if (Math.abs(vx) < combinedHalfWidths) {\n      //A collision might be occurring. Check for a collision on the y axis\n      if (Math.abs(vy) < combinedHalfHeights) {\n        //There's definitely a collision happening\n        hit = true;\n      } else {\n        //There's no collision on the y axis\n        hit = false;\n      }\n    } else {\n      //There's no collision on the x axis\n      hit = false;\n    }\n\n    //`hit` will be either `true` or `false`\n    return hit;\n  }\n\n  animate = (delta) => {\n    //animate function creates a response 60fps\n\n    this.contain(this.state, { x: 20, y: 20, width: 780, height: 580 });\n    //changes with voice.\n    //how do we make it respond with 90º orientation?\n    //'left, then another left' = left, then down\n\n    //Left arrow key `press` method\n    // if (this.state.action === 'go') {\n    //   this.setState({\n    //     speed: 3,\n    //   });\n    // }\n    // if (this.state.action === 'stop') {\n    //   this.setState({\n    //     speed: 0,\n    //   });\n    // }\n\n    if (this.props.action === 'left') {\n      this.setState({\n        vx: -3,\n        vy: 0,\n        rotation: Math.PI * 2 * (3 / 4),\n      });\n    }\n    if (this.props.action === 'up') {\n      this.setState({\n        vy: -3,\n        vx: 0,\n        rotation: 0,\n      });\n    }\n    if (this.props.action === 'right') {\n      this.setState({\n        vx: 3,\n        vy: 0,\n        rotation: Math.PI * 2 * (1 / 4),\n      });\n    }\n    if (this.props.action === 'down') {\n      this.setState({\n        vy: 3,\n        vx: 0,\n        rotation: Math.PI * 2 * (1 / 2),\n      });\n    }\n\n    // Capture the keyboard arrow keys\n    // let left = this.keyboard('ArrowLeft'),\n    //   up = this.keyboard('ArrowUp'),\n    //   right = this.keyboard('ArrowRight'),\n    //   down = this.keyboard('ArrowDown');\n\n    // left.press = () => {\n    //   //Change the velocity when the key is pressed\n\n    //   this.setState({\n    //     vx: -5,\n    //     vy: 0,\n    //   });\n    // };\n\n    // //Left arrow key `release` method\n    // left.release = () => {\n    //   //If the left arrow has been released, and the right arrow isn't down,\n    //   //and the cat isn't moving vertically:\n    //   //Stop the cat\n    //   if (!right.isDown && this.state.vy === 0) {\n    //     this.setState({ vx: 0 });\n    //   }\n    // };\n\n    // up.press = () => {\n    //   this.setState({\n    //     vy: -5,\n    //     vx: 0,\n    //   });\n    // };\n\n    // up.release = () => {\n    //   if (!down.isDown && this.state.vx === 0) {\n    //     this.setState({ vy: 0 });\n    //   }\n    // };\n\n    // right.press = () => {\n    //   this.setState({\n    //     vx: 5,\n    //     vy: 0,\n    //   });\n    // };\n    // right.release = () => {\n    //   if (!left.isDown && this.state.vy === 0) {\n    //     this.setState({ vx: 0 });\n    //   }\n    // };\n\n    // down.press = () => {\n    //   this.setState({\n    //     vy: 5,\n    //     vx: 0,\n    //   });\n    // };\n    // down.release = () => {\n    //   if (!up.isDown && this.state.vx === 0) {\n    //     this.setState({\n    //       vy: 0,\n    //     });\n    //   }\n    // };\n\n    this.setState((prevState) => ({\n      x: (prevState.x += prevState.vx),\n      y: (prevState.y += prevState.vy),\n    }));\n  };\n\n  keyboard(value) {\n    let key = {};\n    key.value = value;\n    key.isDown = false;\n    key.isUp = true;\n    key.press = undefined;\n    key.release = undefined;\n    //The `downHandler`\n    key.downHandler = (event) => {\n      if (event.key === key.value) {\n        if (key.isUp && key.press) key.press();\n        key.isDown = true;\n        key.isUp = false;\n        event.preventDefault();\n      }\n    };\n\n    //The `upHandler`\n    key.upHandler = (event) => {\n      if (event.key === key.value) {\n        if (key.isDown && key.release) key.release();\n        key.isDown = false;\n        key.isUp = true;\n        event.preventDefault();\n      }\n    };\n\n    //Attach event listeners\n    const downListener = key.downHandler.bind(key);\n    const upListener = key.upHandler.bind(key);\n\n    window.addEventListener('keydown', downListener, false);\n    window.addEventListener('keyup', upListener, false);\n\n    // Detach event listeners\n    key.unsubscribe = () => {\n      window.removeEventListener('keydown', downListener);\n      window.removeEventListener('keyup', upListener);\n    };\n\n    return key;\n  }\n\n  render() {\n    return (\n      <Car\n        {...this.props}\n        {...this.state}\n        // x={this.state.x}\n        // y={this.state.y}\n        // rotation={this.state.rotation}\n      />\n    );\n  }\n}\n\nexport default withApp(Game);\n","/Users/winsonchan/Documents/immersiveFullStack/seniorPhase/Backseat-Driver/src/pixi/Car.js",[],"/Users/winsonchan/Documents/immersiveFullStack/seniorPhase/Backseat-Driver/src/tenserFlow/index.js",["70","71"],"import * as tf from '@tensorflow/tfjs';\nimport * as speechCommands from '@tensorflow-models/speech-commands'\n\nlet recognizer;\nlet words;\nconst wordList = [];\n\nexport async function loadModel() {\n  recognizer = speechCommands.create('BROWSER_FFT', 'directional4w');\n  // directional4w\n  await recognizer.ensureModelLoaded();\n  // Make sure that the underlying model and metadata are loaded via HTTPS\n  // requests.\n  words = recognizer.wordLabels();\n  console.log(recognizer.wordLabels());\n  // See the array of words that the recognizer is trained to recognize.\n}\n\n// `listen()` takes two arguments:\n// 1. A callback function that is invoked anytime a word is recognized.\n// 2. A configuration object with adjustable fields such a\n//    - includeSpectrogram\n//    - probabilityThreshold\n//    - includeEmbedding\nexport function startListening(callback) {\n  recognizer.listen(({scores}) => {\n    scores = Array.from(scores).map((s, i) => ({score: s, word: words[i]}));\n\n    // After that we sort the array by scode descending\n    scores.sort((s1, s2) => s2.score - s1.score);\n\n    let command = scores[0].word\n    callback(command)\n    // - result.scores contains the probability scores that correspond to\n    //   recognizer.wordLabels().\n    // - result.spectrogram contains the spectrogram of the recognized word.\n  }, {\n    includeSpectrogram: true,\n    probabilityThreshold: 0.9\n  });\n}\n\nexport function stopListening(){\n  recognizer.stopListening();\n}\n\nexport default recognizer\n",{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":1,"column":27,"nodeType":"78","messageId":"79","endLine":1,"endColumn":35},{"ruleId":"76","severity":1,"message":"80","line":1,"column":37,"nodeType":"78","messageId":"79","endLine":1,"endColumn":43},{"ruleId":"76","severity":1,"message":"81","line":2,"column":13,"nodeType":"78","messageId":"79","endLine":2,"endColumn":18},{"ruleId":"76","severity":1,"message":"82","line":9,"column":8,"nodeType":"78","messageId":"79","endLine":9,"endColumn":13},{"ruleId":"76","severity":1,"message":"83","line":11,"column":8,"nodeType":"78","messageId":"79","endLine":11,"endColumn":16},{"ruleId":"76","severity":1,"message":"84","line":16,"column":7,"nodeType":"78","messageId":"79","endLine":16,"endColumn":16},{"ruleId":"76","severity":1,"message":"81","line":2,"column":13,"nodeType":"78","messageId":"79","endLine":2,"endColumn":18},{"ruleId":"76","severity":1,"message":"80","line":1,"column":27,"nodeType":"78","messageId":"79","endLine":1,"endColumn":33},{"ruleId":"76","severity":1,"message":"85","line":7,"column":8,"nodeType":"78","messageId":"79","endLine":7,"endColumn":12},{"ruleId":"76","severity":1,"message":"86","line":9,"column":10,"nodeType":"78","messageId":"79","endLine":9,"endColumn":18},{"ruleId":"76","severity":1,"message":"81","line":2,"column":13,"nodeType":"78","messageId":"79","endLine":2,"endColumn":18},{"ruleId":"76","severity":1,"message":"87","line":6,"column":12,"nodeType":"78","messageId":"79","endLine":6,"endColumn":15},{"ruleId":"76","severity":1,"message":"88","line":2,"column":8,"nodeType":"78","messageId":"79","endLine":2,"endColumn":17},{"ruleId":"76","severity":1,"message":"89","line":5,"column":10,"nodeType":"78","messageId":"79","endLine":5,"endColumn":19},{"ruleId":"76","severity":1,"message":"90","line":5,"column":21,"nodeType":"78","messageId":"79","endLine":5,"endColumn":35},{"ruleId":"76","severity":1,"message":"91","line":1,"column":13,"nodeType":"78","messageId":"79","endLine":1,"endColumn":15},{"ruleId":"76","severity":1,"message":"92","line":6,"column":7,"nodeType":"78","messageId":"79","endLine":6,"endColumn":15},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'THREE' is defined but never used.","'Scene' is defined but never used.","'firebase' is defined but never used.","'firestore' is assigned a value but never used.","'lerp' is defined but never used.","'keyboard' is defined but never used.","'ref' is assigned a value but never used.","'PropTypes' is defined but never used.","'loadModel' is defined but never used.","'startListening' is defined but never used.","'tf' is defined but never used.","'wordList' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]