[{"/Users/michaelkim/Documents/Backseat-Driver/src/App.js":"1","/Users/michaelkim/Documents/Backseat-Driver/src/pixi/Car.js":"2","/Users/michaelkim/Documents/Backseat-Driver/src/tenserFlow/index.js":"3","/Users/michaelkim/Documents/Backseat-Driver/src/pixi/Scene.js":"4","/Users/michaelkim/Documents/Backseat-Driver/src/firebase.js":"5","/Users/michaelkim/Documents/Backseat-Driver/src/pixi/Game.js":"6"},{"size":646,"mtime":1606527629071,"results":"7","hashOfConfig":"8"},{"size":394,"mtime":1606756084693,"results":"9","hashOfConfig":"8"},{"size":1484,"mtime":1606344264598,"results":"10","hashOfConfig":"8"},{"size":448,"mtime":1606561223036,"results":"11","hashOfConfig":"8"},{"size":567,"mtime":1606344264595,"results":"12","hashOfConfig":"8"},{"size":7244,"mtime":1606758683019,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"76nz7g",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"17"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"/Users/michaelkim/Documents/Backseat-Driver/src/App.js",["31","32"],"import React from 'react'\nimport logo from './logo.svg';\nimport Scene from './pixi/Scene';\nimport './App.css';\nimport firebase from './firebase'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Scene />\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n    </div>\n  );\n}\n\nexport default App;\n",["33","34"],"/Users/michaelkim/Documents/Backseat-Driver/src/pixi/Car.js",[],"/Users/michaelkim/Documents/Backseat-Driver/src/tenserFlow/index.js",["35","36"],"import * as tf from '@tensorflow/tfjs';\nimport * as speechCommands from '@tensorflow-models/speech-commands'\n\nlet recognizer;\nlet words;\nconst wordList = [];\n\nexport async function loadModel() {\n  recognizer = speechCommands.create('BROWSER_FFT', 'directional4w');\n  // directional4w\n  await recognizer.ensureModelLoaded();\n  // Make sure that the underlying model and metadata are loaded via HTTPS\n  // requests.\n  words = recognizer.wordLabels();\n  console.log(recognizer.wordLabels());\n  // See the array of words that the recognizer is trained to recognize.\n}\n\n// `listen()` takes two arguments:\n// 1. A callback function that is invoked anytime a word is recognized.\n// 2. A configuration object with adjustable fields such a\n//    - includeSpectrogram\n//    - probabilityThreshold\n//    - includeEmbedding\nexport function startListening(callback) {\n  recognizer.listen(({scores}) => {\n    scores = Array.from(scores).map((s, i) => ({score: s, word: words[i]}));\n\n    // After that we sort the array by scode descending\n    scores.sort((s1, s2) => s2.score - s1.score);\n\n    let command = scores[0].word\n    callback(command)\n    // - result.scores contains the probability scores that correspond to\n    //   recognizer.wordLabels().\n    // - result.spectrogram contains the spectrogram of the recognized word.\n  }, {\n    includeSpectrogram: true,\n    probabilityThreshold: 0.9\n  });\n}\n\nexport function stopListening(){\n  recognizer.stopListening();\n}\n\nexport default recognizer\n","/Users/michaelkim/Documents/Backseat-Driver/src/pixi/Scene.js",[],"/Users/michaelkim/Documents/Backseat-Driver/src/firebase.js",["37"],"import firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyCTkYa8Oea0gGKZXTUOTa-UTP72rSB81dw\",\n  authDomain: \"backseat-driver-dbc21.firebaseapp.com\",\n  databaseURL: \"https://backseat-driver-dbc21.firebaseio.com\",\n  projectId: \"backseat-driver-dbc21\",\n  storageBucket: \"backseat-driver-dbc21.appspot.com\",\n  messagingSenderId: \"136877489486\",\n  appId: \"1:136877489486:web:911ab156f0092c1515321f\",\n  measurementId: \"G-N9KYGB0YPM\"\n})\n\nconst firestore = firebase.firestore()\n\nexport default firebase\n","/Users/michaelkim/Documents/Backseat-Driver/src/pixi/Game.js",["38","39","40"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withApp } from 'react-pixi-fiber';\nimport Car from './Car';\nimport { loadModel, startListening } from '../tenserFlow';\n\n// http://pixijs.io/examples/#/basics/basic.js\nclass Game extends Component {\n  constructor() {\n    super();\n    this.state = {\n      rotation: 0,\n      vx: 0,\n      vy: 0,\n      x: 300,\n      y: 400,\n      speed: 0,\n      action: '',\n    };\n    this.voiceAction = this.voiceAction.bind(this);\n    this.contain = this.contain.bind(this);\n  }\n\n  voiceAction(command) {\n    this.setState({\n      action: command,\n    });\n    console.log('pixi game command:', this.state.action);\n  }\n\n  componentDidMount() {\n    //passed down through Stage component\n    this.props.app.ticker.add(this.animate);\n    // loadModel();\n    // startListening(this.voiceAction);\n  }\n\n  componentWillUnmount() {\n    this.props.app.ticker.remove(this.animate);\n  }\n\n  ///contain function; pixijs\n  //put helper functions in separate folder?\n  contain(carState, container) {\n    let collision = undefined;\n\n    //Left\n    if (carState.x < container.x) {\n      this.setState({\n        x: container.x,\n        // vx: 0,\n      });\n      collision = 'left';\n    }\n\n    //Top\n    if (carState.y < container.y) {\n      this.setState({\n        y: container.y,\n        vy: 0,\n      });\n      collision = 'top';\n    }\n\n    //Right\n    if (carState.x > container.width) {\n      this.setState({\n        x: container.width,\n        vx: 0,\n      });\n\n      collision = 'right';\n    }\n\n    //Bottom\n    if (carState.y > container.height) {\n      this.setState({\n        y: container.height,\n        vy: 0,\n      });\n      collision = 'bottom';\n    }\n    //Return the `collision` value\n    return collision;\n  }\n\n  //collision test function\n  hitTestRectangle(r1, r2) {\n    //Define the variables we'll need to calculate\n    let hit, combinedHalfWidths, combinedHalfHeights, vx, vy;\n\n    //hit will determine whether there's a collision\n    hit = false;\n\n    //Find the center points of each carState\n    r1.centerX = r1.x + r1.width / 2;\n    r1.centerY = r1.y + r1.height / 2;\n    r2.centerX = r2.x + r2.width / 2;\n    r2.centerY = r2.y + r2.height / 2;\n\n    //Find the half-widths and half-heights of each carState\n    r1.halfWidth = r1.width / 2;\n    r1.halfHeight = r1.height / 2;\n    r2.halfWidth = r2.width / 2;\n    r2.halfHeight = r2.height / 2;\n\n    //Calculate the distance vector between the carStates\n    vx = r1.centerX - r2.centerX;\n    vy = r1.centerY - r2.centerY;\n\n    //Figure out the combined half-widths and half-heights\n    combinedHalfWidths = r1.halfWidth + r2.halfWidth;\n    combinedHalfHeights = r1.halfHeight + r2.halfHeight;\n\n    //Check for a collision on the x axis\n    if (Math.abs(vx) < combinedHalfWidths) {\n      //A collision might be occurring. Check for a collision on the y axis\n      if (Math.abs(vy) < combinedHalfHeights) {\n        //There's definitely a collision happening\n        hit = true;\n      } else {\n        //There's no collision on the y axis\n        hit = false;\n      }\n    } else {\n      //There's no collision on the x axis\n      hit = false;\n    }\n\n    //`hit` will be either `true` or `false`\n    return hit;\n  }\n\n  animate = (delta) => {\n    //animate function creates a response 60fps\n\n    this.contain(this.state, { x: 20, y: 20, width: 780, height: 580 });\n    //changes with voice.\n    //how do we make it respond with 90ยบ orientation?\n    //'left, then another left' = left, then down\n\n    //Left arrow key `press` method\n    // if (this.state.action === 'go') {\n    //   this.setState({\n    //     speed: 3,\n    //   });\n    // }\n    // if (this.state.action === 'stop') {\n    //   this.setState({\n    //     speed: 0,\n    //   });\n    // }\n\n    // if (this.state.action === 'left') {\n    //   this.setState({\n    //     vx: -3,\n    //     vy: 0,\n    //     rotation: Math.PI * 2 * (3 / 4),\n    //   });\n    // }\n    // if (this.state.action === 'up') {\n    //   this.setState({\n    //     vy: -3,\n    //     vx: 0,\n    //     rotation: 0,\n    //   });\n    // }\n    // if (this.state.action === 'right') {\n    //   this.setState({\n    //     vx: 3,\n    //     vy: 0,\n    //     rotation: Math.PI * 2 * (1 / 4),\n    //   });\n    // }\n    // if (this.state.action === 'down') {\n    //   this.setState({\n    //     vy: 3,\n    //     vx: 0,\n    //     rotation: Math.PI * 2 * (1 / 2),\n    //   });\n    // }\n\n    // Capture the keyboard arrow keys\n    let left = this.keyboard('ArrowLeft'),\n      up = this.keyboard('ArrowUp'),\n      right = this.keyboard('ArrowRight'),\n      down = this.keyboard('ArrowDown');\n\n    left.press = () => {\n      //Change the velocity when the key is pressed\n\n      this.setState({\n        vx: -5,\n        vy: 0,\n      });\n    };\n\n    //Left arrow key `release` method\n    left.release = () => {\n      //If the left arrow has been released, and the right arrow isn't down,\n      //and the cat isn't moving vertically:\n      //Stop the cat\n      if (!right.isDown && this.state.vy === 0) {\n        this.setState({ vx: 0 });\n      }\n    };\n\n    up.press = () => {\n      this.setState({\n        vy: -5,\n        vx: 0,\n      });\n    };\n\n    up.release = () => {\n      if (!down.isDown && this.state.vx === 0) {\n        this.setState({ vy: 0 });\n      }\n    };\n\n    right.press = () => {\n      this.setState({\n        vx: 5,\n        vy: 0,\n      });\n    };\n    right.release = () => {\n      if (!left.isDown && this.state.vy === 0) {\n        this.setState({ vx: 0 });\n      }\n    };\n\n    down.press = () => {\n      this.setState({\n        vy: 5,\n        vx: 0,\n      });\n    };\n    down.release = () => {\n      if (!up.isDown && this.state.vx === 0) {\n        this.setState({\n          vy: 0,\n        });\n      }\n    };\n\n    this.setState((prevState) => ({\n      x: (prevState.x += prevState.vx),\n      y: (prevState.y += prevState.vy),\n    }));\n  };\n\n  keyboard(value) {\n    let key = {};\n    key.value = value;\n    key.isDown = false;\n    key.isUp = true;\n    key.press = undefined;\n    key.release = undefined;\n    //The `downHandler`\n    key.downHandler = (event) => {\n      if (event.key === key.value) {\n        if (key.isUp && key.press) key.press();\n        key.isDown = true;\n        key.isUp = false;\n        event.preventDefault();\n      }\n    };\n\n    //The `upHandler`\n    key.upHandler = (event) => {\n      if (event.key === key.value) {\n        if (key.isDown && key.release) key.release();\n        key.isDown = false;\n        key.isUp = true;\n        event.preventDefault();\n      }\n    };\n\n    //Attach event listeners\n    const downListener = key.downHandler.bind(key);\n    const upListener = key.upHandler.bind(key);\n\n    window.addEventListener('keydown', downListener, false);\n    window.addEventListener('keyup', upListener, false);\n\n    // Detach event listeners\n    key.unsubscribe = () => {\n      window.removeEventListener('keydown', downListener);\n      window.removeEventListener('keyup', upListener);\n    };\n\n    return key;\n  }\n\n  render() {\n    return (\n      <Car\n        {...this.props}\n        {...this.state}\n        // x={this.state.x}\n        // y={this.state.y}\n        // rotation={this.state.rotation}\n      />\n    );\n  }\n}\n\nexport default withApp(Game);\n",{"ruleId":"41","severity":1,"message":"42","line":2,"column":8,"nodeType":"43","messageId":"44","endLine":2,"endColumn":12},{"ruleId":"41","severity":1,"message":"45","line":5,"column":8,"nodeType":"43","messageId":"44","endLine":5,"endColumn":16},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"41","severity":1,"message":"50","line":1,"column":13,"nodeType":"43","messageId":"44","endLine":1,"endColumn":15},{"ruleId":"41","severity":1,"message":"51","line":6,"column":7,"nodeType":"43","messageId":"44","endLine":6,"endColumn":15},{"ruleId":"41","severity":1,"message":"52","line":16,"column":7,"nodeType":"43","messageId":"44","endLine":16,"endColumn":16},{"ruleId":"41","severity":1,"message":"53","line":2,"column":8,"nodeType":"43","messageId":"44","endLine":2,"endColumn":17},{"ruleId":"41","severity":1,"message":"54","line":5,"column":10,"nodeType":"43","messageId":"44","endLine":5,"endColumn":19},{"ruleId":"41","severity":1,"message":"55","line":5,"column":21,"nodeType":"43","messageId":"44","endLine":5,"endColumn":35},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'firebase' is defined but never used.","no-native-reassign",["56"],"no-negated-in-lhs",["57"],"'tf' is defined but never used.","'wordList' is assigned a value but never used.","'firestore' is assigned a value but never used.","'PropTypes' is defined but never used.","'loadModel' is defined but never used.","'startListening' is defined but never used.","no-global-assign","no-unsafe-negation"]